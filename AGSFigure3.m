
clear; % clear CommandWindow and workspace
 a(1)=-1;
 b(1)=0;
 sayac=0;
 AGS=zeros(3,1);
 eps=1e-8;% for sedumi
 bigeps=eps;% for sedumi
 maxiter=400;% for sedumi
 degrees=1:10;
 timescale=1;
 tolerance=5*10^(-5);%5*e-7 de iyi gozukuyordu ama r=0.05 de a=1.5 de deger bulmamalıydı%1e-6 için şekil kaydedildi veriler kayit000 ve 020 da
 %2e-6 da kaydedildi
 %1e-5 de r=0.4 ve 0.5 arası cok iyi
 %3*10-6 harika1.mat de simple rho-tolerance ile

 toleranceRed=tolerance%this is for reduced hence should be smaller
 n=2;%the dimension of the state space
 hold on
t=0:0.01:1.57;
xt=0.5*cos(t);
plot(t,xt)
 for r=0:.01:0.5
     a(2)=r;
 for aa=0:.05:6.3
         b(2)=-aa;
         % define the plant itself
         G = @(x) (0.1E1+x(1).^2).^2.*(0.1E1+x(2).^2).^2;

  F1=@(x)timescale*(1+x(1).^2).*(-0.3E1).*(0.333333E0.*a(1).*sin(b(1))+0.333333E0.*a(1).*cos(b(1)) ...
  .*x(1)+(-0.2E1).*a(2).*cos(b(2)).*x(1)+0.333333E0.*a(1).*sin(b(1)) ...
  .*x(1).^2+(-0.133333E1).*a(2).*sin(b(2)).*x(1).^2+0.333333E0.*a(1) ...
  .*cos(b(1)).*x(1).^3+0.2E1.*a(2).*cos(b(2)).*x(1).^3+0.666667E0.* ...
  a(1).*cos(b(1)).*x(2)+0.666667E0.*a(1).*sin(b(1)).*x(1).*x(2)+ ...
  0.266667E1.*a(2).*sin(b(2)).*x(1).*x(2)+0.666667E0.*a(1).*cos(b(1) ...
  ).*x(1).^2.*x(2)+(-0.533333E1).*a(2).*cos(b(2)).*x(1).^2.*x(2)+ ...
  0.666667E0.*a(1).*sin(b(1)).*x(1).^3.*x(2)+(-0.266667E1).*a(2).* ...
  sin(b(2)).*x(1).^3.*x(2)+0.133333E1.*a(1).*cos(b(1)).*x(1).*x(2) ...
  .^2+0.133333E1.*a(2).*cos(b(2)).*x(1).*x(2).^2+0.8E1.*a(2).*sin(b( ...
  2)).*x(1).^2.*x(2).^2+0.133333E1.*a(1).*cos(b(1)).*x(1).^3.*x(2) ...
  .^2+(-0.133333E1).*a(2).*cos(b(2)).*x(1).^3.*x(2).^2+0.666667E0.* ...
  a(1).*cos(b(1)).*x(2).^3+0.666667E0.*a(1).*sin(b(1)).*x(1).*x(2) ...
  .^3+(-0.266667E1).*a(2).*sin(b(2)).*x(1).*x(2).^3+0.666667E0.*a(1) ...
  .*cos(b(1)).*x(1).^2.*x(2).^3+0.533333E1.*a(2).*cos(b(2)).*x(1) ...
  .^2.*x(2).^3+0.666667E0.*a(1).*sin(b(1)).*x(1).^3.*x(2).^3+ ...
  0.266667E1.*a(2).*sin(b(2)).*x(1).^3.*x(2).^3+(-0.333333E0).*a(1) ...
  .*sin(b(1)).*x(2).^4+0.1E1.*a(1).*cos(b(1)).*x(1).*x(2).^4+( ...
  -0.2E1).*a(2).*cos(b(2)).*x(1).*x(2).^4+(-0.333333E0).*a(1).*sin( ...
  b(1)).*x(1).^2.*x(2).^4+(-0.133333E1).*a(2).*sin(b(2)).*x(1).^2.* ...
  x(2).^4+0.1E1.*a(1).*cos(b(1)).*x(1).^3.*x(2).^4+0.2E1.*a(2).*cos( ...
  b(2)).*x(1).^3.*x(2).^4);

  F2=@(x)timescale*(1+x(2).^2).*(-0.6E1).*(0.166667E0.*a(1).*sin(b(1))+0.333333E0.*a(1).*cos(b(1)) ...
  .*x(1)+0.333333E0.*a(1).*cos(b(1)).*x(1).^3+(-0.166667E0).*a(1).* ...
  sin(b(1)).*x(1).^4+0.166667E0.*a(1).*cos(b(1)).*x(2)+(-0.1E1).*a( ...
  2).*cos(b(2)).*x(2)+0.333333E0.*a(1).*sin(b(1)).*x(1).*x(2)+ ...
  0.133333E1.*a(2).*sin(b(2)).*x(1).*x(2)+0.666667E0.*a(1).*cos(b(1) ...
  ).*x(1).^2.*x(2)+0.666667E0.*a(2).*cos(b(2)).*x(1).^2.*x(2)+ ...
  0.333333E0.*a(1).*sin(b(1)).*x(1).^3.*x(2)+(-0.133333E1).*a(2).* ...
  sin(b(2)).*x(1).^3.*x(2)+0.5E0.*a(1).*cos(b(1)).*x(1).^4.*x(2)+( ...
  -0.1E1).*a(2).*cos(b(2)).*x(1).^4.*x(2)+0.166667E0.*a(1).*sin(b(1) ...
  ).*x(2).^2+(-0.666667E0).*a(2).*sin(b(2)).*x(2).^2+0.333333E0.*a( ...
  1).*cos(b(1)).*x(1).*x(2).^2+(-0.266667E1).*a(2).*cos(b(2)).*x(1) ...
  .*x(2).^2+0.4E1.*a(2).*sin(b(2)).*x(1).^2.*x(2).^2+0.333333E0.*a( ...
  1).*cos(b(1)).*x(1).^3.*x(2).^2+0.266667E1.*a(2).*cos(b(2)).*x(1) ...
  .^3.*x(2).^2+(-0.166667E0).*a(1).*sin(b(1)).*x(1).^4.*x(2).^2+( ...
  -0.666667E0).*a(2).*sin(b(2)).*x(1).^4.*x(2).^2+0.166667E0.*a(1).* ...
  cos(b(1)).*x(2).^3+0.1E1.*a(2).*cos(b(2)).*x(2).^3+0.333333E0.*a( ...
  1).*sin(b(1)).*x(1).*x(2).^3+(-0.133333E1).*a(2).*sin(b(2)).*x(1) ...
  .*x(2).^3+0.666667E0.*a(1).*cos(b(1)).*x(1).^2.*x(2).^3+( ...
  -0.666667E0).*a(2).*cos(b(2)).*x(1).^2.*x(2).^3+0.333333E0.*a(1).* ...
  sin(b(1)).*x(1).^3.*x(2).^3+0.133333E1.*a(2).*sin(b(2)).*x(1).^3.* ...
  x(2).^3+0.5E0.*a(1).*cos(b(1)).*x(1).^4.*x(2).^3+0.1E1.*a(2).*cos( ...
  b(2)).*x(1).^4.*x(2).^3); 

F1Red=@(x) timescale*(1+x.^2).*(-0.6E1).*((-0.166667E0).*a(1).*sin(b(1))+0.5E0.*a(1).*cos(b(1)).* ...
  x+(-0.1E1).*a(2).*cos(b(2)).*x+(-0.166667E0).*a(1).*sin(b(1) ...
  ).*x.^2+(-0.666667E0).*a(2).*sin(b(2)).*x.^2+0.5E0.*a(1).* ...
  cos(b(1)).*x.^3+0.1E1.*a(2).*cos(b(2)).*x.^3);
%tol=1e+4;
%u=10
%tolerance=tol/sum([sqrt(F1([0 0])^2+F2([0 0])^2),sqrt(F1([u u])^2+F2([u u])^2),sqrt(F1([u -u])^2+F2([u -u])^2),sqrt(F1([-u u])^2+F2([-u u])^2),sqrt(F1([-u -u])^2+F2([-u -u])^2)])
%toleranceRed=tol/sum([sqrt(F1Red([0])^2),sqrt(F1Red([u])^2),sqrt(F1Red([-u])^2)])
GRed=@(x)(1+x.^2).^2;
        for degree=degrees%this is actually the half of the degree
            degreeInt=1;
            x=sdpvar(n,1);
            y=sdpvar(n-1,1);
            degree*2;
            [rho,wrho] = polynomial(x,2*degree);
            [rhoRed,wrhoRed] = polynomial(y,2*degree);
            f1 = F1(x);
            f2 = F2(x);
            g = G(x);
            f1Red=F1Red(y);
            gRed=GRed(y);
            div = jacobian( f1, x(1) )+...
                jacobian( f2, x(2) );
            fun = (g*rho*div+jacobian(rho,x)*[f1;f2]*g-rho*jacobian(g,x)*[f1;f2]);
            divRed = jacobian( f1Red, y );
            funRed = (gRed*rhoRed*divRed+jacobian(rhoRed,y)*f1Red*gRed-rhoRed*jacobian(gRed,y)*f1Red);
            %(Bx * div - alpha*jacobian(Anladım KHAS112Bx, x)*([Ax*f1 + g1*c;Ax*f2 + g2*c]));
            % fun = (Bx * div - alpha*jacobian(Bx, x)*([Ax*f1 + g1*c]));
            %constr = [sos(fun),sos(rho),sos(funRed),sos(rhoRed),sum(wrho)>=tolerance,sum(wrhoRed)>=toleranceRed]%,wrho(1)>=tolerance,wrhoRed(1)>=toleranceRed];
            constr = [sos(fun),sos(rho-tolerance),sos(funRed),sos(rhoRed-toleranceRed)];
            params = [wrho; wrhoRed];
%             constr =
%             [sos(fun),sos(rho),sum(wrho)>=tolerance,wrho(1)>=tolerance];%BURADAKI
%             EKSTRA KOSULU EKLE DIGERLERINE
%             params = [wrho];
%             constr = [sos(funRed),sos(rhoRed),sum(wrhoRed)>=toleranceRed];
%            params = [ wrhoRed];
            %options = sdpsettings('solver','sdpa');
            %options = sdpsettings('solver','sdpt3');
            options = sdpsettings('solver','sedumi','verbose',0,'sedumi.eps',eps,'sedumi.bigeps', ...
                bigeps,'sedumi.maxiter',maxiter);
            %options = sdpsettings('solver','mosek');
            [sol,~,~,~]=solvesos(constr,1,options,params);
            if sol.problem==0
                yalmip('clear')
                sayac=sayac+1;
                AGS(:,sayac)=[r;aa;2*degree];
                save('kayitHarika3New.mat')
                degree
                [r aa]
                AGS
                break
            end
            degree
            [r aa]
            AGS
            yalmip('clear')
        end
    end
 end
plot(AGS(2,:),AGS(1,:),'*')
%,








